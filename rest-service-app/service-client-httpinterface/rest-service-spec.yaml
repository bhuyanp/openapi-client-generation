openapi: 3.1.0
info:
  title: Apply Default Global SecurityScheme in springdoc-openapi
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
paths:
  /v1/products:
    get:
      tags:
      - Products
      operationId: getProducts
      responses:
        "404":
          description: No products found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Unable to process the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "403":
          description: Forbidden. Invalid or missing bearer token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
      - Products
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductRequest"
        required: true
      responses:
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Unable to save the product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "403":
          description: Forbidden. Invalid or missing bearer token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /login:
    post:
      tags:
      - Authentication
      description: Returns valid JWT token
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        "401":
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
  /v1/products/{id}:
    get:
      tags:
      - Products
      operationId: getProductById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No product found matching the id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Unable to process the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "403":
          description: Forbidden. Invalid or missing bearer token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
components:
  schemas:
    AddProductRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the product.
          example: Product Title A
          minLength: 1
        price:
          type: number
          format: double
          description: A non negative product price.
          example: 30.2
      required:
      - price
      - title
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri
        properties:
          type: object
          additionalProperties: {}
    Product:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        price:
          type: number
          format: double
        createdDate:
          type: string
          format: date-time
      required:
      - createdDate
      - id
      - price
      - title
    AuthRequest:
      type: object
      properties:
        userName:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
      - password
      - userName
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description: Valid JWT token.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
